import JSZip from 'jszip'
import type { CompilationResult } from './types'

/**
 * Download compilation result as a ZIP file
 */
export async function downloadProjectAsZip(
  result: CompilationResult,
  projectName: string = 'my-app'
): Promise<void> {
  const zip = new JSZip()

  // Add all generated code files
  for (const [filePath, content] of Object.entries(result.output.code)) {
    zip.file(filePath, content)
  }

  // Add package.json from manifest
  if (result.output.manifest?.packageJson) {
    zip.file('package.json', JSON.stringify(result.output.manifest.packageJson, null, 2))
  }

  // Add tailwind.config.js
  if (result.output.manifest?.['tailwind.config.js']) {
    zip.file('tailwind.config.js', result.output.manifest['tailwind.config.js'])
  }

  // Add postcss.config.js
  if (result.output.manifest?.['postcss.config.js']) {
    zip.file('postcss.config.js', result.output.manifest['postcss.config.js'])
  }

  // Add tsconfig.node.json (required by tsconfig.json)
  const tsconfigNode = {
    compilerOptions: {
      composite: true,
      skipLibCheck: true,
      module: "ESNext",
      moduleResolution: "bundler",
      allowSyntheticDefaultImports: true
    },
    include: ["vite.config.ts"]
  }
  zip.file('tsconfig.node.json', JSON.stringify(tsconfigNode, null, 2))

  // Add README.md with instructions
  const readme = `# ${projectName}

This project was generated by the Universal Capsule Compiler.

## üöÄ Quick Start

### Install dependencies
\`\`\`bash
npm install
\`\`\`

### Run development server
\`\`\`bash
npm run dev
\`\`\`

The app will be available at http://localhost:5173

### Build for production
\`\`\`bash
npm run build
\`\`\`

### Preview production build
\`\`\`bash
npm run preview
\`\`\`

## üìä Compilation Stats

- **Platform**: ${result.platform}
- **Capsules Used**: ${result.stats.capsulesProcessed}
- **Lines of Code**: ${result.stats.linesOfCode}
- **Compilation Time**: ${result.stats.duration}ms
- **Dependencies**: ${result.stats.dependencies.npm} npm packages

## üß© Capsules Used

This app was built using ${result.stats.capsulesProcessed} universal capsules from the HubLab registry.

## üìö Learn More

- [Universal Capsule Compiler Docs](https://hublab.dev/docs)
- [Capsule Registry](https://hublab.dev/capsules)
- [Report Issues](https://github.com/hublab/compiler/issues)

---

Generated with ‚ù§Ô∏è by Universal Capsule Compiler
`
  zip.file('README.md', readme)

  // Add .gitignore
  const gitignore = `# Dependencies
node_modules
.pnp
.pnp.js

# Testing
coverage

# Production
dist
build

# Misc
.DS_Store
.env.local
.env.development.local
.env.test.local
.env.production.local

# Logs
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# Editor
.vscode
.idea
*.swp
*.swo
*~
`
  zip.file('.gitignore', gitignore)

  // Generate ZIP blob
  const blob = await zip.generateAsync({ type: 'blob' })

  // Trigger download
  const url = URL.createObjectURL(blob)
  const link = document.createElement('a')
  link.href = url
  link.download = `${projectName.toLowerCase().replace(/\s+/g, '-')}.zip`
  document.body.appendChild(link)
  link.click()
  document.body.removeChild(link)
  URL.revokeObjectURL(url)
}

/**
 * Copy code to clipboard
 */
export async function copyCodeToClipboard(code: string): Promise<void> {
  try {
    await navigator.clipboard.writeText(code)
  } catch (error) {
    // Fallback for browsers that don't support clipboard API
    const textarea = document.createElement('textarea')
    textarea.value = code
    textarea.style.position = 'fixed'
    textarea.style.opacity = '0'
    document.body.appendChild(textarea)
    textarea.select()
    document.execCommand('copy')
    document.body.removeChild(textarea)
  }
}

/**
 * Format file size
 */
export function formatFileSize(bytes: number): string {
  if (bytes === 0) return '0 Bytes'
  const k = 1024
  const sizes = ['Bytes', 'KB', 'MB']
  const i = Math.floor(Math.log(bytes) / Math.log(k))
  return Math.round((bytes / Math.pow(k, i)) * 100) / 100 + ' ' + sizes[i]
}
